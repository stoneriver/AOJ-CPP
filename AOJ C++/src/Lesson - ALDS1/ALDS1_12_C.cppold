#include <bits/stdc++.h>
using namespace std;

#define MAX 10000
#define INF INT_MAX
#define WHITE 0
#define GRAY 1
#define BLACK 2

vector<pair<int, int> > M[MAX];
int n;
int col[MAX];
int d[MAX];

void init() {
	for (int i = 0; i < n; i++) {
		col[i] = WHITE;
		d[i] = INF;
	}
}
void input() {
	for (int i = 0; i < n; i++) {
		int u, k;
		cin >> u >> k;
		for (int j = 0; j < k; j++) {
			int v, c;
			cin >> v >> c;
			M[u].push_back(make_pair(v, c));
		}
	}
}
void dijkstra(int s) {
	d[s] = 0;
	priority_queue<pair<int, int> > PQ;
	PQ.push(make_pair(d[s] * (-1), s));
	col[s] = GRAY;
	while (!PQ.empty()) {
		pair<int, int> f = PQ.top();
		PQ.pop();
		int u = f.second;
		col[u] = BLACK;
		if (d[u] < f.first * (-1))
			continue;
		for (int j = 0; j < M[u].size(); j++) {
			int v = M[u][j].first;
			if (col[v] != BLACK) {
				if (d[u] + M[u][j].second < d[v]) {
					d[v] = d[u] + M[u][j].second;
					col[v] = GRAY;
					PQ.push(make_pair(d[v] * (-1), v));
				}
			}
		}
	}
}
void output() {
	for (int i = 0; i < n; i++) {
		cout << i << " " << d[i] << endl;
	}
}

int main() {
	cin >> n;
	init();
	input();
	dijkstra(0);
	output();
	return 0;
}
